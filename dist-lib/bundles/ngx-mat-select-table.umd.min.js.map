{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://ngx-mat-select-table/mat-select-table.component.ts","ng://ngx-mat-select-table/directives/mat-select-table-input-restriction.directive.ts","ng://ngx-mat-select-table/ngx-mat-select-table.module.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","metadataKey","metadataValue","metadata","__read","o","n","m","Symbol","iterator","e","call","ar","next","done","push","value","error","__spread","concat","MatSelectTableComponent","cd","this","nullRow","id","close","EventEmitter","completeRowList","completeValueList","controlValueAccessorKeys","_onDestroy","Subject","_onSelectOpen","_onOptionsChange","tableColumnsMap","Map","filterControls","FormGroup","overallFilterControl","FormControl","prototype","ngOnInit","_this","multiple","matSelect","openedChange","pipe","takeUntil","subscribe","opened","resetFiltersOnOpen","matOptions","resetFilters","overallSearchVisibleState","overallSearchVisible","resetSortOnOpen","sort","start","disableClear","overallSearchEnabled","proxyMatSelectSearchConfiguration","matSelectSearchConfigurator","table","_headerRowDefChanged","setTimeout","forEach","tableRef","nativeElement","querySelectorAll","disabled","panelElement","panel","panelHeight","getBoundingClientRect","height","tableAdditionalHeight","_getRenderedRows","_headerRowOutlet","_footerRowOutlet","row","isNaN","style","maxHeight","disableScrollToActiveOnOptionsChanged","isNullOrUndefined","_keyManager","debounceTime","take","firstValue","tableDataSource","setActiveItem","detectChanges","ignored","emit","valueChange","isArray","some","v","writeValue","filter","checkAndResetSelection","ngAfterViewInit","merge","apply","sortChange","valueChanges","dataClone","dataSource","data","addNullRow","unshift","applyOverallFilter","applyColumnLevelFilters","active","defaultSort","direction","sortData","changes","options","toArray","option","reset","map","notifyOnChanges","change","activeRow","tableActiveRow","ngOnDestroy","complete","registerOnChange","fn","undefined","filteredOutRows","indexOf","splice","choice","registerOnTouched","setDisabledState","isDisabled","updateCompleteRowList","ngOnChanges","currentValue","matSelectConfigurator","configuration_1","keys","includes","panelClass","tableColumns","columns","column","clear","set","applyProxyToArray","emulateMatOptionClick","event","composedPath","et","HTMLElement","tagName","toLowerCase","rowElement","parentElement","childOption","querySelector","click","filterFormControl","contains","registerControl","get","simpleTriggerLabelFn","triggerLabelSort","customTriggerLabelTemplate","trim","atLeastPartialSubstitution","substitution","replace","_","join","toggleOverallSearch","matSelectSearch","_focus","valueId","configuration","filters","controls","has","enabled","filterKeys","k","filterKey","cellValue","item","comparator","comparatorFn","cellValueLC","filterValueLC","startsWith","rowShouldBeFiltered","j","array","callback","methodName","res","Array","setValue","sortingDataAccessor","_isNumberValue","numberValue","Number","a","b","aValue","bValue","Date","getTime","isString","localeCompare","isNumber","labelForNullValue","resetOptionAction","ChangeDetectorRef","tslib_1.__decorate","Input","Output","ViewChild","MatSelect","MatSelectSearchComponent","MatSort","MatTable","read","ElementRef","ViewChildren","MatOption","QueryList","MatSelectTableComponent_1","Component","selector","template","exportAs","changeDetection","ChangeDetectionStrategy","OnPush","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","MatSelectTableInputRestrictionDirective","onKeyPress","appInputRestriction","integerOnly","preventDefault","onPaste","regex","clipboardData","getData","match","HostListener","Directive","NgxMatSelectTableModule","NgModule","declarations","imports","CommonModule","FormsModule","ReactiveFormsModule","MatSelectModule","MatSortModule","MatOptionModule","MatCommonModule","MatTableModule","MatInputModule","MatIconModule","NgxMatSelectSearchModule","bootstrap","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  QueryList,\r\n  SimpleChanges,\r\n  ViewChild,\r\n  ViewChildren\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, FormControl, FormGroup, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {merge, Subject} from 'rxjs';\r\nimport {MatOption, MatSelect, MatSort, MatTable, MatTableDataSource, Sort, SortDirection} from '@angular/material';\r\nimport {isArray, isNullOrUndefined, isNumber, isString} from 'util';\r\nimport {MatSelectTableDataSource} from './MatSelectTableDataSource';\r\nimport {MatSelectTableRow} from './MatSelectTableRow';\r\nimport {_isNumberValue} from '@angular/cdk/coercion';\r\nimport {debounceTime, take, takeUntil} from 'rxjs/operators';\r\nimport {MatSelectTableColumn} from './MatSelectTableColumn';\r\nimport {MatSelectTableFilter} from './MatSelectTableFilter';\r\nimport {MatSelectSearchComponent} from 'ngx-mat-select-search';\r\n\r\nconst MAX_SAFE_INTEGER = 9007199254740991;\r\n\r\n@Component({\r\n  selector: 'ngx-mat-select-table',\r\n  templateUrl: './mat-select-table.component.html',\r\n  styleUrls: ['./mat-select-table.component.scss'],\r\n  exportAs: 'ngx-mat-select-table',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => MatSelectTableComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class MatSelectTableComponent implements ControlValueAccessor, OnInit, AfterViewInit, OnDestroy, OnChanges {\r\n\r\n  /** Data Source for the table */\r\n  @Input() dataSource: MatSelectTableDataSource<MatSelectTableRow>;\r\n\r\n  /**\r\n   * Multiple/Single mode for {@see MatSelect#multiple} to initialize.\r\n   * NB: switching between modes in runtime is not supported by {@see MatSelect}\r\n   */\r\n  @Input() multiple: boolean;\r\n\r\n  /** Whether or not overall search mode enabled. See {@see MatSelectTableComponent} */\r\n  @Input() overallSearchEnabled: boolean;\r\n\r\n  /** Default is true */\r\n  @Input() overallSearchVisible: boolean;\r\n\r\n  /** Whether or not should {@see MatSelectTableComponent} be visible on open. Default is true */\r\n  @Input() resetSortOnOpen: boolean;\r\n\r\n  /** Whether or not previous search should be cleared on open. Default is true */\r\n  @Input() resetFiltersOnOpen: boolean;\r\n\r\n  /**\r\n   * Function to customize the default label\r\n   */\r\n  @Input() customTriggerLabelFn: (value: MatSelectTableRow[]) => string;\r\n\r\n  /**\r\n   * Sort option for values in the customTriggerLabelFn in Multiple mode.\r\n   */\r\n  @Input() triggerLabelSort: Sort;\r\n\r\n  /**\r\n   * Template to customize the default trigger label. Has lesser priority than {@see MatSelectTableComponent#customTriggerLabelFn}.\r\n   * Substitution is case sensitive.\r\n   * Example: ${name} ${id} - ${address}\r\n   */\r\n  @Input() customTriggerLabelTemplate: string;\r\n\r\n  @Input() labelForNullValue: string;\r\n  private nullRow: MatSelectTableRow = {id: null};\r\n\r\n  /**\r\n   * {@see MatSelect} proxy inputs configurator\r\n   * {@see MatSelect#multiple} gets value from {@see MatSelectTableComponent#multiple}\r\n   */\r\n  @Input() matSelectConfigurator: { [key: string]: any };\r\n\r\n  /**\r\n   * {@see MatSelectSearchComponent} proxy inputs configurator\r\n   * {@see MatSelectSearchComponent#clearSearchInput} gets value from {@see MatSelectTableComponent#resetFiltersOnOpen}\r\n   * {@see MatSelectSearchComponent} {@see ControlValueAccessor} gets value from {@see MatSelectTableComponent#overallFilterControl}\r\n   */\r\n  @Input() matSelectSearchConfigurator: { [key: string]: any };\r\n\r\n  /**\r\n   * Apply default sorting\r\n   */\r\n  @Input() defaultSort: Sort;\r\n  \r\n  /**\r\n   * Action for 'All' option.\r\n   */\r\n  @Input() resetOptionAction: () => void;\r\n\r\n  @Output() close: EventEmitter<boolean> = new EventEmitter();\r\n\r\n  @ViewChild('componentSelect') private matSelect: MatSelect;\r\n\r\n  @ViewChild(MatSelectSearchComponent) private matSelectSearch: MatSelectSearchComponent;\r\n\r\n  @ViewChild(MatSort) private sort: MatSort;\r\n\r\n  @ViewChild(MatTable) private table: MatTable<MatSelectTableRow>;\r\n\r\n  @ViewChild('table', {read: ElementRef}) private tableRef: ElementRef;\r\n\r\n  @ViewChildren(MatOption) private matOptions: QueryList<MatOption>;\r\n\r\n  tableDataSource: MatSelectTableRow[];\r\n\r\n  tableColumns: string[];\r\n\r\n  tableColumnsMap: Map<string, MatSelectTableColumn>;\r\n\r\n  tableActiveRow: number;\r\n\r\n  filteredOutRows: { [key: string]: MatSelectTableRow };\r\n\r\n  completeRowList: MatSelectTableRow[] = [];\r\n\r\n  overallSearchVisibleState: boolean;\r\n\r\n  overallFilterControl: FormControl;\r\n\r\n  private filterControls: FormGroup;\r\n\r\n  private completeValueList: any[] = [];\r\n\r\n  private controlValueAccessorKeys: string[] = [\r\n    'formControl',\r\n    'formControlName',\r\n    'formGroup',\r\n    'formGroupName',\r\n    'formArray',\r\n    'formArrayName'\r\n  ];\r\n\r\n  /** Subject that emits when the component has been destroyed. */\r\n  private _onDestroy = new Subject<void>();\r\n\r\n  private _onSelectOpen = new Subject<void>();\r\n\r\n  private _onOptionsChange = new Subject<void>();\r\n\r\n  constructor(private cd: ChangeDetectorRef) {\r\n    this.tableColumnsMap = new Map();\r\n    this.filterControls = new FormGroup({});\r\n    this.overallFilterControl = new FormControl('');\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.multiple = this.multiple || false;\r\n    this.matSelect.openedChange\r\n      .pipe(takeUntil(this._onDestroy))\r\n      .subscribe(opened => {\r\n        if (this.resetFiltersOnOpen !== false || !this.matOptions.length) {\r\n          this.resetFilters();\r\n        }\r\n        this.overallSearchVisibleState = this.overallSearchVisible;\r\n        if (this.resetSortOnOpen !== false) {\r\n          this.sort.sort({id: '', start: 'asc', disableClear: false});\r\n        }\r\n        if (!opened) {\r\n          this.close.emit(!opened);\r\n          return;\r\n        }\r\n        if (this.overallSearchEnabled) {\r\n          this.proxyMatSelectSearchConfiguration(this.matSelectSearchConfigurator);\r\n        }\r\n        // ToDo: get rid of this workaround (updates header row [otherwise sort mechanism produces glitches])\r\n        (this.table as any)._headerRowDefChanged = true;\r\n        // Disable sort buttons to prevent sorting change on SPACE key pressed in filter field\r\n        setTimeout(() => [].forEach.call(\r\n          this.tableRef.nativeElement.querySelectorAll('button.mat-sort-header-button'),\r\n          (e) => e.disabled = true)\r\n        );\r\n\r\n        // Patch the height of the panel to include the height of the header and footer\r\n        const panelElement: HTMLDivElement = this.matSelect.panel.nativeElement;\r\n        const panelHeight = panelElement.getBoundingClientRect().height;\r\n        let tableAdditionalHeight = 0;\r\n        this.table\r\n          ._getRenderedRows(this.table._headerRowOutlet)\r\n          .concat(this.table._getRenderedRows(this.table._footerRowOutlet))\r\n          .forEach(row => tableAdditionalHeight += row.getBoundingClientRect().height);\r\n        if (!isNaN(panelHeight)) {\r\n          panelElement.style.maxHeight = `${panelHeight + tableAdditionalHeight}px`;\r\n        }\r\n\r\n        if (!this.matSelectSearchConfigurator.disableScrollToActiveOnOptionsChanged\r\n          && !isNullOrUndefined(this.matSelect._keyManager) && this.completeRowList.length > 0) {\r\n          this._onSelectOpen.pipe(takeUntil(this._onDestroy), debounceTime(1), take(1)).subscribe(() => {\r\n            const firstValue = `${this.completeRowList[0].id}`;\r\n            for (let i = 0; i < this.tableDataSource.length; i++) {\r\n              if (`${this.tableDataSource[i].id}` === firstValue) {\r\n                this.matSelect._keyManager.setActiveItem(i);\r\n                try {\r\n                  this.cd.detectChanges();\r\n                } catch (ignored) {\r\n                }\r\n                break;\r\n              }\r\n            }\r\n          });\r\n        }\r\n      });\r\n\t  \r\n\t  this.matSelect.valueChange\t\r\n      .pipe(takeUntil(this._onDestroy))\t\r\n      .subscribe((value) => {\t\r\n        if (!this.multiple) {\t\r\n          return;\t\r\n        }\t\r\n        if (isArray(value) && value.length > 1 && value.some(v => v === '')) {\t\r\n          this.writeValue(value.filter(v => v !== ''));\t\r\n          try {\t\r\n            this.cd.detectChanges();\t\r\n          } catch (ignored) {\t\r\n          }\t\r\n        }\t\r\n        if (isArray(value) && value.length === 0) {\t\r\n          this.checkAndResetSelection();\t\r\n        }\t\r\n      });\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    merge(...[\r\n      this._onOptionsChange,\r\n      this.sort.sortChange,\r\n      this.filterControls.valueChanges,\r\n      this.overallFilterControl.valueChanges\r\n    ])\r\n      .pipe(takeUntil(this._onDestroy), debounceTime(100))\r\n      .subscribe(() => {\r\n        const dataClone: MatSelectTableRow[] = [...((this.dataSource || {data: []}).data || [])];\r\n        if (this.addNullRow()) {\r\n          dataClone.unshift(this.nullRow);\r\n        }\r\n\r\n        // Apply filtering\r\n        if (this.overallSearchEnabled && this.overallSearchVisibleState) {\r\n          this.applyOverallFilter(dataClone);\r\n        } else {\r\n          this.applyColumnLevelFilters(dataClone);\r\n        }\r\n\r\n        // Inherit default sorting options if sort not specified\r\n        if (!this.sort.active && !isNullOrUndefined(this.defaultSort) && this.defaultSort.active) {\r\n          this.sort.active = this.defaultSort.active;\r\n          this.sort.direction = this.defaultSort.direction;\r\n        }\r\n\r\n        // Apply default or manual sorting\r\n        this.tableDataSource = !this.sort.active ?\r\n          dataClone : this.sortData(dataClone, this.sort.active, this.sort.direction);\r\n\r\n        try {\r\n          this.cd.detectChanges();\r\n        } catch (ignored) {\r\n        }\r\n\r\n        this._onSelectOpen.next();\r\n      });\r\n\r\n    // Manually sort data for this.matSelect.options (QueryList<MatOption>) and notify matSelect.options of changes\r\n    // It's important to keep this.matSelect.options order synchronized with data in the table\r\n    //     because this.matSelect.options (QueryList<MatOption>) doesn't update it's state after table data is changed\r\n    this.matOptions.changes.subscribe(() => {\r\n      const options: { [key: string]: MatOption } = {};\r\n      this.matOptions.toArray()\r\n        .filter(option => !isNullOrUndefined(option))\r\n        .forEach(option => options[`${option.value}`] = option);\r\n      this.matSelect.options.reset(this.tableDataSource\r\n        .filter(row => !isNullOrUndefined(options[`${row.id}`]))\r\n        .map(row => options[`${row.id}`]));\r\n      this.matSelect.options.notifyOnChanges();\r\n    });\r\n\r\n    if (!isNullOrUndefined(this.matSelect._keyManager)) {\r\n      // Subscribe on KeyManager changes to highlight the table rows accordingly\r\n      this.matSelect._keyManager.change\r\n        .pipe(takeUntil(this._onDestroy))\r\n        .subscribe(activeRow => this.tableActiveRow = activeRow);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._onSelectOpen.complete();\r\n    this._onDestroy.next();\r\n    this._onDestroy.complete();\r\n  }\r\n\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    const proxyFn: (value: any) => void = (value: any) => {\r\n      // ToDo: refactor - comparison mechanism isn't optimized. filteredOutRows is a map but completeValueList is an array\r\n      if (this.multiple === true) {\r\n        for (let i = this.completeValueList.length - 1; i >= 0; i--) {\r\n          if (this.filteredOutRows[`${this.completeValueList[i]}`] === undefined && value.indexOf(this.completeValueList[i]) === -1) {\r\n            this.completeValueList.splice(i, 1);\r\n          }\r\n        }\r\n        value\r\n          .filter(choice => this.completeValueList.indexOf(choice) === -1)\r\n          .forEach(choice => this.completeValueList.push(choice));\r\n        this.matSelect.value = this.completeValueList;\r\n        fn(this.completeValueList);\r\n        this.completeRowList.splice(0);\r\n        ((this.dataSource || {data: []}).data || [])\r\n          .filter(row => this.completeValueList.indexOf(row.id) !== -1)\r\n          .forEach(row => this.completeRowList.push(row));\r\n      } else {\r\n        fn(value);\r\n        this.completeRowList.splice(0);\r\n        ((this.dataSource || {data: []}).data || [])\r\n          .filter(row => row.id === value)\r\n          .forEach(row => this.completeRowList.push(row));\r\n      }\r\n    };\r\n    this.matSelect.registerOnChange(proxyFn);\r\n  }\r\n\r\n  registerOnTouched(fn: () => {}): void {\r\n    this.matSelect.registerOnTouched(fn);\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.matSelect.setDisabledState(isDisabled);\r\n  }\r\n\r\n  writeValue(value: any): void {\r\n    this.updateCompleteRowList(value);\r\n    this.matSelect.writeValue(value);\r\n    if (this.matSelect.value !== value) {\r\n      this.matSelect.value = value;\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n\r\n    if (!isNullOrUndefined(changes.resetFiltersOnOpen) && changes.resetFiltersOnOpen.currentValue !== false) {\r\n      this.resetFilters();\r\n    }\r\n\r\n    if (!isNullOrUndefined(changes.dataSource)) {\r\n      this.updateCompleteRowList(this.completeRowList.map(row => row.id));\r\n    }\r\n\r\n    // Proxy @Input bindings to MatSelect\r\n    if (!isNullOrUndefined(changes.matSelectConfigurator)) {\r\n      const configuration = changes.matSelectConfigurator.currentValue;\r\n      Object.keys(configuration)\r\n        .filter(key => !['multiple', 'panelClass'].includes(key) && !this.controlValueAccessorKeys.includes(key))\r\n        .forEach(key => this.matSelect[key] = configuration[key]);\r\n      const panelClass: string[] = [];\r\n      panelClass.push('mat-select-search-table-panel');\r\n      if (!isNullOrUndefined(configuration.panelClass)) {\r\n        panelClass.push(configuration.panelClass);\r\n      }\r\n      if (this.overallSearchEnabled) {\r\n        panelClass.push('mat-select-search-panel');\r\n      }\r\n      this.matSelect.panelClass = panelClass;\r\n    }\r\n\r\n    if (!isNullOrUndefined(changes.matSelectSearchConfigurator)) {\r\n      this.proxyMatSelectSearchConfiguration(changes.matSelectSearchConfigurator.currentValue);\r\n    }\r\n\r\n    if (!isNullOrUndefined(changes.dataSource)\r\n      && !isNullOrUndefined(changes.dataSource.currentValue)\r\n      && isArray(changes.dataSource.currentValue.data)) {\r\n      this.tableDataSource = [...changes.dataSource.currentValue.data];\r\n      if (this.addNullRow()) {\r\n        this.tableDataSource.unshift(this.nullRow);\r\n      }\r\n      this.tableColumns = ['_selection', ...changes.dataSource.currentValue.columns.map(column => column.key)];\r\n      this.tableColumnsMap.clear();\r\n      changes.dataSource.currentValue.columns.forEach(column => this.tableColumnsMap.set(column.key, column));\r\n      this.applyProxyToArray(changes.dataSource.currentValue.data, () => {\r\n        this._onOptionsChange.next();\r\n      });\r\n      this._onOptionsChange.next();\r\n    }\r\n  }\r\n\r\n  emulateMatOptionClick(event: MouseEvent): void {\r\n    if (event.composedPath()\r\n      .filter(et => et instanceof HTMLElement)\r\n      .some((et: HTMLElement) => et.tagName.toLowerCase() === 'mat-option')) {\r\n      return;\r\n    }\r\n    if (!(event.target instanceof HTMLElement)) {\r\n      return;\r\n    }\r\n    let rowElement = event.target;\r\n    while (rowElement != null && rowElement instanceof HTMLElement && rowElement.tagName.toLowerCase() !== 'tr') {\r\n      rowElement = rowElement.parentElement;\r\n    }\r\n    if (rowElement === null) {\r\n      return;\r\n    }\r\n    const childOption: HTMLElement = rowElement.querySelector('mat-option');\r\n    if (!childOption) {\r\n      return;\r\n    }\r\n    childOption.click();\r\n  }\r\n\r\n\r\n  filterFormControl(key: string): FormControl {\r\n    if (!this.filterControls.contains(key)) {\r\n      this.filterControls.registerControl(key, new FormControl(''));\r\n    }\r\n    return <FormControl>this.filterControls.get(key);\r\n  }\r\n\r\n  simpleTriggerLabelFn(value: MatSelectTableRow[]): string {\r\n    if (!isNullOrUndefined(this.triggerLabelSort)) {\r\n      this.sortData(value, this.triggerLabelSort.active, this.triggerLabelSort.direction);\r\n    }\r\n    return value.map(row => {\r\n      if (isNullOrUndefined(row)) {\r\n        return '';\r\n      }\r\n      if (isNullOrUndefined(this.customTriggerLabelTemplate)\r\n        || typeof this.customTriggerLabelTemplate !== 'string'\r\n        || this.customTriggerLabelTemplate.trim().length === 0) {\r\n        return `${row.id}`;\r\n      }\r\n      let atLeastPartialSubstitution = false;\r\n      const substitution: string = this.customTriggerLabelTemplate.replace(/[$]{1}[{]{1}([^}]+)[}]{1}?/g, (_, key) =>\r\n        !isNullOrUndefined(row[key]) && (atLeastPartialSubstitution = true) ? row[key] : '');\r\n      if (atLeastPartialSubstitution === false) {\r\n        return `${row.id}`;\r\n      }\r\n      return substitution.trim();\r\n    }).join(', ');\r\n  }\r\n\r\n  toggleOverallSearch(): void {\r\n    this.overallSearchVisibleState = !this.overallSearchVisibleState;\r\n    this.resetFilters();\r\n    if (this.overallSearchVisibleState) {\r\n      setTimeout(() => this.matSelectSearch._focus());\r\n    }\r\n  }\r\n\r\n  private updateCompleteRowList(value: any[]): void {\r\n    this.completeRowList.splice(0);\r\n    this.completeValueList.splice(0);\r\n    if (isNullOrUndefined(value)) {\r\n      return;\r\n    }\r\n    const valueArray: any[] = !isArray(value) ? [value] : value;\r\n    valueArray\r\n      .filter(valueId => !isNullOrUndefined(valueId))\r\n      .forEach(valueId => {\r\n        ((this.dataSource || {data: []}).data || [])\r\n          .filter(row => !isNullOrUndefined(row) && !isNullOrUndefined(row.id) && row.id === valueId)\r\n          .forEach(row => {\r\n            this.completeRowList.push(row);\r\n            this.completeValueList.push(row.id);\r\n          });\r\n      });\r\n  }\r\n\r\n  private proxyMatSelectSearchConfiguration(configuration: { [key: string]: any }): void {\r\n    if (isNullOrUndefined(this.matSelectSearch)) {\r\n      return;\r\n    }\r\n\r\n    // Proxy @Input bindings to NgxMatSelectSearch\r\n    Object.keys(configuration)\r\n      .filter(key => !['clearSearchInput'].includes(key) && !this.controlValueAccessorKeys.includes(key))\r\n      .forEach(key => this.matSelectSearch[key] = configuration[key]);\r\n  }\r\n\r\n  private applyColumnLevelFilters(data: MatSelectTableRow[]): void {\r\n    this.filteredOutRows = {};\r\n    const filters: { [key: string]: { filter: MatSelectTableFilter, value: any } } = {};\r\n    Object.keys(this.filterControls.controls)\r\n      .filter(key => this.tableColumnsMap.has(key)\r\n        && !isNullOrUndefined(this.tableColumnsMap.get(key).filter)\r\n        // If filter is enabled\r\n        && this.tableColumnsMap.get(key).filter.enabled !== false)\r\n      .filter(key => {\r\n        const value = this.filterControls.get(key).value;\r\n        return !isNullOrUndefined(value)\r\n          // If an array - check it's not empty\r\n          && ((isArray(value) && value.length > 0)\r\n            // If string - check that not blank\r\n            || (typeof value === 'string' && value.trim().length > 0)\r\n            // If number - check that toString() is not blank\r\n            || (typeof value === 'number' && `${value}`.trim().length > 0));\r\n      })\r\n      .forEach(key => filters[key] = {\r\n        filter: this.tableColumnsMap.get(key).filter,\r\n        value: this.filterControls.get(key).value\r\n      });\r\n    const filterKeys: string[] = Object.keys(filters);\r\n    for (let i = data.length - 1; i >= 0; i--) {\r\n      for (let k = 0; k < filterKeys.length; k++) {\r\n        const filterKey: string = filterKeys[k];\r\n        const row: MatSelectTableRow = data[i];\r\n        if (isNullOrUndefined(row)) {\r\n          continue;\r\n        }\r\n        const cellValue: any = row[filterKey];\r\n        if (isNullOrUndefined(cellValue)) {\r\n          data.splice(i, 1).forEach(item => this.filteredOutRows[`${item.id}`] = item);\r\n          continue;\r\n        }\r\n        const filter = filters[filterKey];\r\n        const comparator = filter.filter.comparator;\r\n        if (typeof filter.filter.comparatorFn === 'function') {\r\n          if (!filter.filter.comparatorFn.call(null, cellValue, filter.value, row)) {\r\n            data.splice(i, 1).forEach(item => this.filteredOutRows[`${item.id}`] = item);\r\n            break;\r\n          }\r\n        } else if (isNullOrUndefined(comparator) || comparator === 'equals') {\r\n          if (filter.value !== cellValue) {\r\n            data.splice(i, 1).forEach(item => this.filteredOutRows[`${item.id}`] = item);\r\n            break;\r\n          }\r\n        } else if (typeof cellValue === 'string' && typeof filter.value === 'string') {\r\n          const cellValueLC: string = `${cellValue}`.toLowerCase();\r\n          const filterValueLC: string = filter.value.toLowerCase();\r\n          if (isNullOrUndefined(comparator) || comparator === 'equalsIgnoreCase') {\r\n            if (filterValueLC !== cellValueLC) {\r\n              data.splice(i, 1).forEach(item => this.filteredOutRows[`${item.id}`] = item);\r\n              break;\r\n            }\r\n          } else if (comparator === 'contains') {\r\n            if (cellValue.indexOf(filter.value) === -1) {\r\n              data.splice(i, 1).forEach(item => this.filteredOutRows[`${item.id}`] = item);\r\n              break;\r\n            }\r\n          } else if (comparator === 'containsIgnoreCase') {\r\n            if (cellValueLC.indexOf(filterValueLC) === -1) {\r\n              data.splice(i, 1).forEach(item => this.filteredOutRows[`${item.id}`] = item);\r\n              break;\r\n            }\r\n          } else if (comparator === 'startsWith') {\r\n            if (!cellValue.startsWith(filter.value)) {\r\n              data.splice(i, 1).forEach(item => this.filteredOutRows[`${item.id}`] = item);\r\n              break;\r\n            }\r\n          } else if (comparator === 'startsWithIgnoreCase') {\r\n            if (!cellValueLC.startsWith(filterValueLC)) {\r\n              data.splice(i, 1).forEach(item => this.filteredOutRows[`${item.id}`] = item);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private applyOverallFilter(data: MatSelectTableRow[]): void {\r\n    this.filteredOutRows = {};\r\n    if (isNullOrUndefined(this.overallFilterControl.value)) {\r\n      return;\r\n    }\r\n    const filterValueLC: string = this.overallFilterControl.value.toLowerCase();\r\n    if (filterValueLC.trim().length === 0) {\r\n      return;\r\n    }\r\n    for (let i = data.length - 1; i >= 0; i--) {\r\n      const row: MatSelectTableRow = data[i];\r\n      let rowShouldBeFiltered = true;\r\n      for (let j = this.dataSource.columns.length - 1; j >= 0; j--) {\r\n        const key: string = this.dataSource.columns[j].key;\r\n        const cellValue: any = row[key];\r\n        if (isNullOrUndefined(cellValue)) {\r\n          continue;\r\n        }\r\n        const cellValueLC: string = `${cellValue}`.toLowerCase();\r\n        if (cellValueLC.indexOf(filterValueLC) !== -1) {\r\n          rowShouldBeFiltered = false;\r\n          break;\r\n        }\r\n      }\r\n      if (rowShouldBeFiltered) {\r\n        data.splice(i, 1).forEach(item => this.filteredOutRows[`${item.id}`] = item);\r\n      }\r\n    }\r\n  }\r\n\r\n  private applyProxyToArray(array: any[], callback: () => void): void {\r\n    ['pop', 'push', 'reverse', 'shift', 'unshift', 'splice', 'sort'].forEach((methodName) => {\r\n      array[methodName] = function () {\r\n        const res = Array.prototype[methodName].apply(array, arguments); // call normal behaviour\r\n        callback.apply(array, arguments); // finally call the callback supplied\r\n        return res;\r\n      };\r\n    });\r\n  }\r\n\r\n  private resetFilters(): void {\r\n    this.overallFilterControl.setValue('');\r\n    Object.keys(this.filterControls.controls)\r\n      .forEach(key => this.filterControls.get(key).setValue(''));\r\n  }\r\n\r\n  /**\r\n   * Taken from {@see MatTableDataSource#sortingDataAccessor}\r\n   *\r\n   * @param data\r\n   * @param sortHeaderId\r\n   */\r\n  private sortingDataAccessor(data: MatSelectTableRow, active: string): string | number | Date {\r\n\r\n    const value = (data as { [key: string]: any })[active];\r\n\r\n    if (_isNumberValue(value)) {\r\n      const numberValue = Number(value);\r\n\r\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\r\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\r\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n\r\n  private sortData(data: MatSelectTableRow[], active: string, direction: SortDirection): MatSelectTableRow[] {\r\n    if (!active || direction === '') {\r\n      return data;\r\n    }\r\n\r\n    return data.sort((a, b) => {\r\n      let aValue = this.sortingDataAccessor(a, active);\r\n      let bValue = this.sortingDataAccessor(b, active);\r\n\r\n      if (a.id === null) {\r\n        return -1;\r\n      } else if (b.id === null) {\r\n        return 1;\r\n      }\r\n\r\n      // Both null/undefined/equal value check\r\n      if (aValue === bValue) {\r\n        return 0;\r\n      }\r\n\r\n      // One null value check\r\n      if (isNullOrUndefined(aValue) && !isNullOrUndefined(bValue)) {\r\n        return -1;\r\n      } else if (!isNullOrUndefined(aValue) && isNullOrUndefined(bValue)) {\r\n        return 1;\r\n      }\r\n\r\n      if (aValue instanceof Date) {\r\n        aValue = aValue.getTime();\r\n      }\r\n      if (bValue instanceof Date) {\r\n        bValue = bValue.getTime();\r\n      }\r\n\r\n      // User localeCompare for strings\r\n      if (isString(aValue) && isString(bValue)) {\r\n        return (<string>aValue).localeCompare(<string>bValue) * (direction === 'asc' ? 1 : -1);\r\n      }\r\n\r\n      // Try to convert to a Number type\r\n      aValue = isNaN(<number>aValue) ? `${aValue}` : +aValue;\r\n      bValue = isNaN(<number>bValue) ? `${bValue}` : +bValue;\r\n\r\n      // if one is number and other is String\r\n      if (isString(aValue) && isNumber(bValue)) {\r\n        return (1) * (direction === 'asc' ? 1 : -1);\r\n      }\r\n      if (isNumber(aValue) && isString(bValue)) {\r\n        return (-1) * (direction === 'asc' ? 1 : -1);\r\n      }\r\n\r\n      // Compare as Numbers otherwise\r\n      return (aValue > bValue ? 1 : -1) * (direction === 'asc' ? 1 : -1);\r\n    });\r\n\t\r\n  }\r\n\r\n  addNullRow(): boolean {\r\n    return !this.multiple && !isNullOrUndefined(this.labelForNullValue);\r\n  }\r\n  \r\n  private checkAndResetSelection() {\t\r\n    if (this.matSelect.value && isArray(this.matSelect.value) && this.matSelect.value.length < 1\t\r\n      && !isNullOrUndefined(this.resetOptionAction)) {\t\r\n      this.resetOptionAction();\t\r\n    }\t\r\n  }\r\n}\r\n","import {Directive, HostListener, Input} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appInputRestriction]'\r\n})\r\nexport class MatSelectTableInputRestrictionDirective {\r\n\r\n  @Input() appInputRestriction: string;\r\n\r\n  @HostListener('keypress', ['$event']) onKeyPress(event) {\r\n    if (this.appInputRestriction === 'integer') {\r\n      this.integerOnly(event);\r\n    }\r\n  }\r\n\r\n  integerOnly(event) {\r\n    const e = <KeyboardEvent>event;\r\n    if (['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'].indexOf(e.key) === -1) {\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n  @HostListener('paste', ['$event']) onPaste(event) {\r\n    let regex;\r\n    if (this.appInputRestriction === 'integer') {\r\n      regex = /^[0-9]*$/;\r\n    }\r\n    const e = <ClipboardEvent>event;\r\n    const pasteData = e.clipboardData.getData('text/plain');\r\n    if (!pasteData.match(regex)) {\r\n      e.preventDefault();\r\n    }\r\n  }\r\n}\r\n","import {NgModule} from '@angular/core';\r\n\r\nimport {CommonModule} from '@angular/common';\r\nimport {MatSelectTableComponent} from './mat-select-table.component';\r\nimport {NgxMatSelectSearchModule} from 'ngx-mat-select-search';\r\nimport {\r\n  MatCommonModule,\r\n  MatIconModule,\r\n  MatInputModule,\r\n  MatOptionModule,\r\n  MatSelectModule,\r\n  MatSortModule,\r\n  MatTableModule\r\n} from '@angular/material';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport {MatSelectTableInputRestrictionDirective} from './directives/mat-select-table-input-restriction.directive';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    MatSelectTableComponent,\r\n    MatSelectTableInputRestrictionDirective\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatSelectModule,\r\n    MatSortModule,\r\n    MatOptionModule,\r\n    MatCommonModule,\r\n    MatTableModule,\r\n    MatInputModule,\r\n    MatIconModule,\r\n    NgxMatSelectSearchModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [MatSelectTableComponent],\r\n  exports: [MatSelectTableComponent]\r\n})\r\nexport class NgxMatSelectTableModule {\r\n}\r\n"]}